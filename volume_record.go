/*
 * XMS API
 *
 * XMS is the controller of distributed storage system
 *
 * API version: SDS_4.2.000.0.200302
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package xmsclient

import (
	"time"
)

// VolumeRecord defines the response content of volume related API
type VolumeRecord struct {

	AccessPath *AccessPathNestview `json:"access_path,omitempty"`

	ActionStatus string `json:"action_status,omitempty"`

	AllocatedSize int64 `json:"allocated_size,omitempty"`

	BlockSnapshotNum int64 `json:"block_snapshot_num,omitempty"`

	BlockVolumeGroup *VolumeGroupNestview `json:"block_volume_group,omitempty"`

	ClientGroupNum int64 `json:"client_group_num,omitempty"`

	CloudPlatform *CloudPlatformNestview `json:"cloud_platform,omitempty"`

	CrcCheck bool `json:"crc_check,omitempty"`

	Create time.Time `json:"create,omitempty"`

	Description string `json:"description,omitempty"`

	DpBlockBackupPolicyNum int64 `json:"dp_block_backup_policy_num,omitempty"`

	DpBlockReplicationPolicy *DpBlockReplicationPolicyNestview `json:"dp_block_replication_policy,omitempty"`

	DpBlockSnapshotPolicy *DpBlockSnapshotPolicyNestview `json:"dp_block_snapshot_policy,omitempty"`

	Flattened bool `json:"flattened,omitempty"`

	// 128 or 129 (advanced)
	Format int64 `json:"format,omitempty"`

	Hidden bool `json:"hidden,omitempty"`

	Id int64 `json:"id,omitempty"`

	ImageId string `json:"image_id,omitempty"`

	LatestSnapshotTime time.Time `json:"latest_snapshot_time,omitempty"`

	MigrationStripes int64 `json:"migration_stripes,omitempty"`

	Name string `json:"name,omitempty"`

	OriginalName string `json:"original_name,omitempty"`

	OriginalVolumeName string `json:"original_volume_name,omitempty"`

	Passive bool `json:"passive,omitempty"`

	// 0 or 1
	PerformancePriority int64 `json:"performance_priority,omitempty"`

	Pool *PoolNestview `json:"pool,omitempty"`

	Progress float64 `json:"progress,omitempty"`

	Qos *VolumeQosSpec `json:"qos,omitempty"`

	QosEnabled bool `json:"qos_enabled,omitempty"`

	// trash
	Recycled bool `json:"recycled,omitempty"`

	// the volume is replicated from a remote cluster, via snapshot or IO
	RemoteCluster *RemoteClusterNestview `json:"remote_cluster,omitempty"`

	ReplicationDest string `json:"replication_dest,omitempty"`

	ReplicationPool string `json:"replication_pool,omitempty"`

	ReplicationPoolId int64 `json:"replication_pool_id,omitempty"`

	ReplicationPoolName string `json:"replication_pool_name,omitempty"`

	ReplicationRole string `json:"replication_role,omitempty"`

	ReplicationStatus string `json:"replication_status,omitempty"`

	ReplicationVersion int64 `json:"replication_version,omitempty"`

	ReplicationVolume string `json:"replication_volume,omitempty"`

	ReplicationVolumeId int64 `json:"replication_volume_id,omitempty"`

	ReplicationVolumeName string `json:"replication_volume_name,omitempty"`

	Size int64 `json:"size,omitempty"`

	Sn string `json:"sn,omitempty"`

	Snapshot *SnapshotNestview `json:"snapshot,omitempty"`

	SnapshotReplicationPool string `json:"snapshot_replication_pool,omitempty"`

	SnapshotReplicationPoolId int64 `json:"snapshot_replication_pool_id,omitempty"`

	SnapshotReplicationRole string `json:"snapshot_replication_role,omitempty"`

	SnapshotReplicationStatus string `json:"snapshot_replication_status,omitempty"`

	SnapshotReplicationVolume string `json:"snapshot_replication_volume,omitempty"`

	SnapshotReplicationVolumeId int64 `json:"snapshot_replication_volume_id,omitempty"`

	Status string `json:"status,omitempty"`

	TrashResource *TrashResourceNestview `json:"trash_resource,omitempty"`

	Update time.Time `json:"update,omitempty"`

	VolumeName string `json:"volume_name,omitempty"`

	Samples []VolumeStat `json:"samples,omitempty"`
}
