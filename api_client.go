/*
 * XMS API
 *
 * XMS is the controller of distributed storage system
 *
 * API version: SDS_4.2.000.0.200302
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package xmsclient

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"errors"
	"io"
	"mime/multipart"
    "golang.org/x/oauth2"
    "golang.org/x/net/context"
	"net/http"
	"net/url"
	"time"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strings"
	"unicode/utf8"
	"strconv"
)

var (
	jsonCheck = regexp.MustCompile("(?i:[application|text]/json)")
	xmlCheck = regexp.MustCompile("(?i:[application|text]/xml)")
)

// APIClient manages communication with the XMS API API vSDS_4.2.000.0.200302
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg 	*Configuration
	common 	service 		// Reuse a single struct instead of allocating one for each service on the heap.

	 // API Services
	AccessPathsApi	*AccessPathsApiService
	AccessTokensApi	*AccessTokensApiService
	ActionLogsApi	*ActionLogsApiService
	AlertGroupsApi	*AlertGroupsApiService
	AlertRulesApi	*AlertRulesApiService
	AlertsApi	*AlertsApiService
	AuthApi	*AuthApiService
	BlockSnapshotsApi	*BlockSnapshotsApiService
	BlockVolumeGroupSnapshotsApi	*BlockVolumeGroupSnapshotsApiService
	BlockVolumeGroupsApi	*BlockVolumeGroupsApiService
	BlockVolumeMigrationJobsApi	*BlockVolumeMigrationJobsApiService
	BlockVolumesApi	*BlockVolumesApiService
	ChunksApi	*ChunksApiService
	ClientCodesApi	*ClientCodesApiService
	ClientGroupsApi	*ClientGroupsApiService
	ClientLunMappingsApi	*ClientLunMappingsApiService
	ClientsApi	*ClientsApiService
	CloudInstancesApi	*CloudInstancesApiService
	CloudPlatformsApi	*CloudPlatformsApiService
	CloudVolumeAttachmentsApi	*CloudVolumeAttachmentsApiService
	CloudVolumesApi	*CloudVolumesApiService
	ClusterApi	*ClusterApiService
	ConfsApi	*ConfsApiService
	CryptoKeysApi	*CryptoKeysApiService
	DisksApi	*DisksApiService
	DomainUserValidatorsApi	*DomainUserValidatorsApiService
	DpBlockBackupJobsApi	*DpBlockBackupJobsApiService
	DpBlockBackupPoliciesApi	*DpBlockBackupPoliciesApiService
	DpBlockReplicationPoliciesApi	*DpBlockReplicationPoliciesApiService
	DpBlockSnapshotJobsApi	*DpBlockSnapshotJobsApiService
	DpBlockSnapshotPoliciesApi	*DpBlockSnapshotPoliciesApiService
	DpBlockSnapshotRecoveryJobsApi	*DpBlockSnapshotRecoveryJobsApiService
	DpFsSnapshotJobsApi	*DpFsSnapshotJobsApiService
	DpFsSnapshotPoliciesApi	*DpFsSnapshotPoliciesApiService
	DpGatewaysApi	*DpGatewaysApiService
	DpSitesApi	*DpSitesApiService
	EmailGroupsApi	*EmailGroupsApiService
	EmailsApi	*EmailsApiService
	EventLogsApi	*EventLogsApiService
	FsActiveDirectoriesApi	*FsActiveDirectoriesApiService
	FsArbitrationPoolsApi	*FsArbitrationPoolsApiService
	FsClientGroupsApi	*FsClientGroupsApiService
	FsClientsApi	*FsClientsApiService
	FsFoldersApi	*FsFoldersApiService
	FsFtpSessionsApi	*FsFtpSessionsApiService
	FsFtpShareAclsApi	*FsFtpShareAclsApiService
	FsFtpSharesApi	*FsFtpSharesApiService
	FsGatewayGroupsApi	*FsGatewayGroupsApiService
	FsGatewaysApi	*FsGatewaysApiService
	FsLdapsApi	*FsLdapsApiService
	FsNfsConnectionsApi	*FsNfsConnectionsApiService
	FsNfsShareAclsApi	*FsNfsShareAclsApiService
	FsNfsSharesApi	*FsNfsSharesApiService
	FsQuotaTreesApi	*FsQuotaTreesApiService
	FsSmbSessionsApi	*FsSmbSessionsApiService
	FsSmbShareAclsApi	*FsSmbShareAclsApiService
	FsSmbSharesApi	*FsSmbSharesApiService
	FsSnapshotsApi	*FsSnapshotsApiService
	FsUserGroupsApi	*FsUserGroupsApiService
	FsUsersApi	*FsUsersApiService
	HostEncSpecsApi	*HostEncSpecsApiService
	HostInfoApi	*HostInfoApiService
	HostInitializationsApi	*HostInitializationsApiService
	HostValidatorsApi	*HostValidatorsApiService
	HostsApi	*HostsApiService
	IdentityPlatformsApi	*IdentityPlatformsApiService
	LicensesApi	*LicensesApiService
	LunsApi	*LunsApiService
	MappingGroupsApi	*MappingGroupsApiService
	NetworkAddressesApi	*NetworkAddressesApiService
	NetworkDiagnosesApi	*NetworkDiagnosesApiService
	NetworkDiagnosisItemsApi	*NetworkDiagnosisItemsApiService
	NetworkInterfacesApi	*NetworkInterfacesApiService
	NfsGatewayBucketMapsApi	*NfsGatewayBucketMapsApiService
	NfsGatewaysApi	*NfsGatewaysApiService
	OsBucketLoggingsApi	*OsBucketLoggingsApiService
	OsBucketsApi	*OsBucketsApiService
	OsCustomLabelsApi	*OsCustomLabelsApiService
	OsExternalStorageClassesApi	*OsExternalStorageClassesApiService
	OsGatewaysApi	*OsGatewaysApiService
	OsKeysApi	*OsKeysApiService
	OsLifecyclesApi	*OsLifecyclesApiService
	OsObjectsApi	*OsObjectsApiService
	OsPoliciesApi	*OsPoliciesApiService
	OsRemotePoliciesApi	*OsRemotePoliciesApiService
	OsReplicationPathsApi	*OsReplicationPathsApiService
	OsReplicationZonesApi	*OsReplicationZonesApiService
	OsSamplesApi	*OsSamplesApiService
	OsSearchEnginesApi	*OsSearchEnginesApiService
	OsSearchGatewaysApi	*OsSearchGatewaysApiService
	OsStorageClassesApi	*OsStorageClassesApiService
	OsUsersApi	*OsUsersApiService
	OsZoneLocksApi	*OsZoneLocksApiService
	OsZonePairsApi	*OsZonePairsApiService
	OsZonePeriodsApi	*OsZonePeriodsApiService
	OsZoneTranslogsApi	*OsZoneTranslogsApiService
	OsZonesApi	*OsZonesApiService
	OsdGroupsApi	*OsdGroupsApiService
	OsdsApi	*OsdsApiService
	PartitionsApi	*PartitionsApiService
	PlacementNodesApi	*PlacementNodesApiService
	PoolsApi	*PoolsApiService
	ProtectionDomainsApi	*ProtectionDomainsApiService
	RemoteClustersApi	*RemoteClustersApiService
	RoleMappingsApi	*RoleMappingsApiService
	S3LoadBalancerGroupsApi	*S3LoadBalancerGroupsApiService
	S3LoadBalancersApi	*S3LoadBalancersApiService
	SearchApi	*SearchApiService
	SearchCapabilitiesApi	*SearchCapabilitiesApiService
	ServicesApi	*ServicesApiService
	SnmpApi	*SnmpApiService
	SslCertificatesApi	*SslCertificatesApiService
	SystemLogsApi	*SystemLogsApiService
	TargetsApi	*TargetsApiService
	TasksApi	*TasksApiService
	TrashResourcesApi	*TrashResourcesApiService
	TrashesApi	*TrashesApiService
	UsersApi	*UsersApiService
	VersionApi	*VersionApiService
	VipGroupsApi	*VipGroupsApiService
	VipInstancesApi	*VipInstancesApiService
	VipsApi	*VipsApiService
	VmFlavorsApi	*VmFlavorsApiService
	VolumeDpBlockBackupPolicyMappingsApi	*VolumeDpBlockBackupPolicyMappingsApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.AccessPathsApi = (*AccessPathsApiService)(&c.common)
	c.AccessTokensApi = (*AccessTokensApiService)(&c.common)
	c.ActionLogsApi = (*ActionLogsApiService)(&c.common)
	c.AlertGroupsApi = (*AlertGroupsApiService)(&c.common)
	c.AlertRulesApi = (*AlertRulesApiService)(&c.common)
	c.AlertsApi = (*AlertsApiService)(&c.common)
	c.AuthApi = (*AuthApiService)(&c.common)
	c.BlockSnapshotsApi = (*BlockSnapshotsApiService)(&c.common)
	c.BlockVolumeGroupSnapshotsApi = (*BlockVolumeGroupSnapshotsApiService)(&c.common)
	c.BlockVolumeGroupsApi = (*BlockVolumeGroupsApiService)(&c.common)
	c.BlockVolumeMigrationJobsApi = (*BlockVolumeMigrationJobsApiService)(&c.common)
	c.BlockVolumesApi = (*BlockVolumesApiService)(&c.common)
	c.ChunksApi = (*ChunksApiService)(&c.common)
	c.ClientCodesApi = (*ClientCodesApiService)(&c.common)
	c.ClientGroupsApi = (*ClientGroupsApiService)(&c.common)
	c.ClientLunMappingsApi = (*ClientLunMappingsApiService)(&c.common)
	c.ClientsApi = (*ClientsApiService)(&c.common)
	c.CloudInstancesApi = (*CloudInstancesApiService)(&c.common)
	c.CloudPlatformsApi = (*CloudPlatformsApiService)(&c.common)
	c.CloudVolumeAttachmentsApi = (*CloudVolumeAttachmentsApiService)(&c.common)
	c.CloudVolumesApi = (*CloudVolumesApiService)(&c.common)
	c.ClusterApi = (*ClusterApiService)(&c.common)
	c.ConfsApi = (*ConfsApiService)(&c.common)
	c.CryptoKeysApi = (*CryptoKeysApiService)(&c.common)
	c.DisksApi = (*DisksApiService)(&c.common)
	c.DomainUserValidatorsApi = (*DomainUserValidatorsApiService)(&c.common)
	c.DpBlockBackupJobsApi = (*DpBlockBackupJobsApiService)(&c.common)
	c.DpBlockBackupPoliciesApi = (*DpBlockBackupPoliciesApiService)(&c.common)
	c.DpBlockReplicationPoliciesApi = (*DpBlockReplicationPoliciesApiService)(&c.common)
	c.DpBlockSnapshotJobsApi = (*DpBlockSnapshotJobsApiService)(&c.common)
	c.DpBlockSnapshotPoliciesApi = (*DpBlockSnapshotPoliciesApiService)(&c.common)
	c.DpBlockSnapshotRecoveryJobsApi = (*DpBlockSnapshotRecoveryJobsApiService)(&c.common)
	c.DpFsSnapshotJobsApi = (*DpFsSnapshotJobsApiService)(&c.common)
	c.DpFsSnapshotPoliciesApi = (*DpFsSnapshotPoliciesApiService)(&c.common)
	c.DpGatewaysApi = (*DpGatewaysApiService)(&c.common)
	c.DpSitesApi = (*DpSitesApiService)(&c.common)
	c.EmailGroupsApi = (*EmailGroupsApiService)(&c.common)
	c.EmailsApi = (*EmailsApiService)(&c.common)
	c.EventLogsApi = (*EventLogsApiService)(&c.common)
	c.FsActiveDirectoriesApi = (*FsActiveDirectoriesApiService)(&c.common)
	c.FsArbitrationPoolsApi = (*FsArbitrationPoolsApiService)(&c.common)
	c.FsClientGroupsApi = (*FsClientGroupsApiService)(&c.common)
	c.FsClientsApi = (*FsClientsApiService)(&c.common)
	c.FsFoldersApi = (*FsFoldersApiService)(&c.common)
	c.FsFtpSessionsApi = (*FsFtpSessionsApiService)(&c.common)
	c.FsFtpShareAclsApi = (*FsFtpShareAclsApiService)(&c.common)
	c.FsFtpSharesApi = (*FsFtpSharesApiService)(&c.common)
	c.FsGatewayGroupsApi = (*FsGatewayGroupsApiService)(&c.common)
	c.FsGatewaysApi = (*FsGatewaysApiService)(&c.common)
	c.FsLdapsApi = (*FsLdapsApiService)(&c.common)
	c.FsNfsConnectionsApi = (*FsNfsConnectionsApiService)(&c.common)
	c.FsNfsShareAclsApi = (*FsNfsShareAclsApiService)(&c.common)
	c.FsNfsSharesApi = (*FsNfsSharesApiService)(&c.common)
	c.FsQuotaTreesApi = (*FsQuotaTreesApiService)(&c.common)
	c.FsSmbSessionsApi = (*FsSmbSessionsApiService)(&c.common)
	c.FsSmbShareAclsApi = (*FsSmbShareAclsApiService)(&c.common)
	c.FsSmbSharesApi = (*FsSmbSharesApiService)(&c.common)
	c.FsSnapshotsApi = (*FsSnapshotsApiService)(&c.common)
	c.FsUserGroupsApi = (*FsUserGroupsApiService)(&c.common)
	c.FsUsersApi = (*FsUsersApiService)(&c.common)
	c.HostEncSpecsApi = (*HostEncSpecsApiService)(&c.common)
	c.HostInfoApi = (*HostInfoApiService)(&c.common)
	c.HostInitializationsApi = (*HostInitializationsApiService)(&c.common)
	c.HostValidatorsApi = (*HostValidatorsApiService)(&c.common)
	c.HostsApi = (*HostsApiService)(&c.common)
	c.IdentityPlatformsApi = (*IdentityPlatformsApiService)(&c.common)
	c.LicensesApi = (*LicensesApiService)(&c.common)
	c.LunsApi = (*LunsApiService)(&c.common)
	c.MappingGroupsApi = (*MappingGroupsApiService)(&c.common)
	c.NetworkAddressesApi = (*NetworkAddressesApiService)(&c.common)
	c.NetworkDiagnosesApi = (*NetworkDiagnosesApiService)(&c.common)
	c.NetworkDiagnosisItemsApi = (*NetworkDiagnosisItemsApiService)(&c.common)
	c.NetworkInterfacesApi = (*NetworkInterfacesApiService)(&c.common)
	c.NfsGatewayBucketMapsApi = (*NfsGatewayBucketMapsApiService)(&c.common)
	c.NfsGatewaysApi = (*NfsGatewaysApiService)(&c.common)
	c.OsBucketLoggingsApi = (*OsBucketLoggingsApiService)(&c.common)
	c.OsBucketsApi = (*OsBucketsApiService)(&c.common)
	c.OsCustomLabelsApi = (*OsCustomLabelsApiService)(&c.common)
	c.OsExternalStorageClassesApi = (*OsExternalStorageClassesApiService)(&c.common)
	c.OsGatewaysApi = (*OsGatewaysApiService)(&c.common)
	c.OsKeysApi = (*OsKeysApiService)(&c.common)
	c.OsLifecyclesApi = (*OsLifecyclesApiService)(&c.common)
	c.OsObjectsApi = (*OsObjectsApiService)(&c.common)
	c.OsPoliciesApi = (*OsPoliciesApiService)(&c.common)
	c.OsRemotePoliciesApi = (*OsRemotePoliciesApiService)(&c.common)
	c.OsReplicationPathsApi = (*OsReplicationPathsApiService)(&c.common)
	c.OsReplicationZonesApi = (*OsReplicationZonesApiService)(&c.common)
	c.OsSamplesApi = (*OsSamplesApiService)(&c.common)
	c.OsSearchEnginesApi = (*OsSearchEnginesApiService)(&c.common)
	c.OsSearchGatewaysApi = (*OsSearchGatewaysApiService)(&c.common)
	c.OsStorageClassesApi = (*OsStorageClassesApiService)(&c.common)
	c.OsUsersApi = (*OsUsersApiService)(&c.common)
	c.OsZoneLocksApi = (*OsZoneLocksApiService)(&c.common)
	c.OsZonePairsApi = (*OsZonePairsApiService)(&c.common)
	c.OsZonePeriodsApi = (*OsZonePeriodsApiService)(&c.common)
	c.OsZoneTranslogsApi = (*OsZoneTranslogsApiService)(&c.common)
	c.OsZonesApi = (*OsZonesApiService)(&c.common)
	c.OsdGroupsApi = (*OsdGroupsApiService)(&c.common)
	c.OsdsApi = (*OsdsApiService)(&c.common)
	c.PartitionsApi = (*PartitionsApiService)(&c.common)
	c.PlacementNodesApi = (*PlacementNodesApiService)(&c.common)
	c.PoolsApi = (*PoolsApiService)(&c.common)
	c.ProtectionDomainsApi = (*ProtectionDomainsApiService)(&c.common)
	c.RemoteClustersApi = (*RemoteClustersApiService)(&c.common)
	c.RoleMappingsApi = (*RoleMappingsApiService)(&c.common)
	c.S3LoadBalancerGroupsApi = (*S3LoadBalancerGroupsApiService)(&c.common)
	c.S3LoadBalancersApi = (*S3LoadBalancersApiService)(&c.common)
	c.SearchApi = (*SearchApiService)(&c.common)
	c.SearchCapabilitiesApi = (*SearchCapabilitiesApiService)(&c.common)
	c.ServicesApi = (*ServicesApiService)(&c.common)
	c.SnmpApi = (*SnmpApiService)(&c.common)
	c.SslCertificatesApi = (*SslCertificatesApiService)(&c.common)
	c.SystemLogsApi = (*SystemLogsApiService)(&c.common)
	c.TargetsApi = (*TargetsApiService)(&c.common)
	c.TasksApi = (*TasksApiService)(&c.common)
	c.TrashResourcesApi = (*TrashResourcesApiService)(&c.common)
	c.TrashesApi = (*TrashesApiService)(&c.common)
	c.UsersApi = (*UsersApiService)(&c.common)
	c.VersionApi = (*VersionApiService)(&c.common)
	c.VipGroupsApi = (*VipGroupsApiService)(&c.common)
	c.VipInstancesApi = (*VipInstancesApiService)(&c.common)
	c.VipsApi = (*VipsApiService)(&c.common)
	c.VmFlavorsApi = (*VmFlavorsApiService)(&c.common)
	c.VolumeDpBlockBackupPolicyMappingsApi = (*VolumeDpBlockBackupPolicyMappingsApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}


// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insenstive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}

// callAPI do the request. 
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	 return c.cfg.HTTPClient.Do(request)
}

// Change base path to allow switching to mocks
func (c *APIClient) ChangeBasePath (path string) {
	c.cfg.BasePath = path
}

// prepareRequest build the request
func (c *APIClient) prepareRequest (
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	fileName string,
	fileBytes []byte) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if len(formParams) > 0 || (len(fileBytes) > 0 && fileName != "") {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		if len(fileBytes) > 0 && fileName != "" {
			w.Boundary()
			//_, fileNm := filepath.Split(fileName)
			part, err := w.CreateFormFile("file", filepath.Base(fileName))
			if err != nil {
				return nil, err
			}
			_, err = part.Write(fileBytes)
			if err != nil {
				return nil, err
			}
			// Set the Boundary in the Content-Type
			headerParams["Content-Type"] = w.FormDataContentType()
		}
		
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers.Set(h, v)
		}
		localVarRequest.Header = headers
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		localVarRequest.Host = c.cfg.Host
	}
	
	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)
	

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer " + auth)
		}
	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}
	
	return localVarRequest, nil
}


// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) (error) {
	return fmt.Errorf(format, a...)
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if jsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if xmlCheck.MatchString(contentType) {
		xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()
	
	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}


// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) (time.Time) {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)
	
	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) (int) {
	return utf8.RuneCountInString(s)
}

